sqrt
#create call
expr <- as.list(substitute(substitute({
df %>%
mutate(vowel=LETTERS%in%c("A","E","I","O","U","Y")) %>%
filter(y>.5) %>%
left_join(by="x")
})), environment())[[2]]
print(getdelayedeval())
print(expr)
testthat::expect_equal(
getdelayedeval(),expr)
})
#create call
expr <- as.list(substitute(deparse({
df %>%
mutate(vowel=LETTERS%in%c("A","E","I","O","U","Y")) %>%
filter(y>.5) %>%
left_join(by="x")
})), environment())[[2]]
expr
as.list(expr)
#create call
expr <- as.list(as.list(substitute(deparse({
df %>%
mutate(vowel=LETTERS%in%c("A","E","I","O","U","Y")) %>%
filter(y>.5) %>%
left_join(by="x")
})), environment())[[2]])[[2]]
expr
test_that("test pausing writes the evaluation to the temp env", {
set.seed(42)
df<-data.frame(x=LETTERS,
y=runif(26),
z=sample(letters,26,replace = TRUE))
df2<-data.frame(x=LETTERS,
w=sample(c(1,2),size = 26,replace = TRUE))
left_join_test2 <- df %>%
mutate(vowel=LETTERS%in%c("A","E","I","O","U","Y")) %>%
filter(y>.5) %>%
left_join(by="x") %||%
sqrt
#create call
expr <- as.list(as.list(substitute(deparse({
df %>%
mutate(vowel=LETTERS%in%c("A","E","I","O","U","Y")) %>%
filter(y>.5) %>%
left_join(by="x")
})), environment())[[2]])[[2]]
print(getdelayedeval())
print(expr)
testthat::expect_equal(
getdelayedeval(),expr)
})
as.character(getdelayedeval())
testthat::expect_equal(
as.character(getdelayedeval()),
c("%>%",
"df %>% mutate(vowel = LETTERS %in% c(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\")) %>% filter(y > 0.5)",
"left_join(by = \"x\")"))
test_that("test pausing writes the evaluation to the temp env", {
set.seed(42)
df<-data.frame(x=LETTERS,
y=runif(26),
z=sample(letters,26,replace = TRUE))
df2<-data.frame(x=LETTERS,
w=sample(c(1,2),size = 26,replace = TRUE))
left_join_test2 <- df %>%
mutate(vowel=LETTERS%in%c("A","E","I","O","U","Y")) %>%
filter(y>.5) %>%
left_join(by="x") %||%
sqrt
testthat::expect_equal(
as.character(getdelayedeval()),
c("%>%",
"df %>% mutate(vowel = LETTERS %in% c(\"A\", \"E\", \"I\", \"O\", \"U\", \"Y\")) %>% filter(y > 0.5)",
"left_join(by = \"x\")"))
})
set.seed(42)
df<-data.frame(x=LETTERS,
y=runif(26),
z=sample(letters,26,replace = TRUE))
df2<-data.frame(x=LETTERS,
w=sample(c(1,2),size = 26,replace = TRUE))
tmpvar2<-df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z)
cor_result <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor(tmpvar2)
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
?parent.env
?parent.frame
play<-function(lhs){
delayedexpr<-getdelayedeval()
delayedFunc<-delayedexpr[[length(delayedexpr)]]
tmp_delayedFunc<-c(delayedFunc[[1]],quote(lhs))
if(length(delayedFunc)>1){
tmp_delayedFunc<-c(tmp_delayedFunc,as.list(delayedFunc)[-1])
}
delayedexpr[[length(delayedexpr)]]<-as.call(tmp_delayedFunc)
eval(as.call(delayedexpr))
}
#'
#' @details The pause pipe works like \code{\link{\%>\%}}, except the
#' return value is `rhs` as the second argument of the priorly paused evaluation
#' #'
#' @seealso \code{\link{\%>\%}}, \code{\link{\%||\%}}
#'
#' @import magrittr
#'
#' @rdname play
#' @export
`%>>>%`<-function(lhs,rhs){
parent <- parent.frame()
env <- new.env(parent = parent)
chain_parts <- magrittr:::split_chain(match.call(), env = env)
eval(as.call(call("%>%",call("%>%",chain_parts$lhs$lhs,substitute(play)),chain_parts$lhs$rhs)))
}
play<-function(lhs){
delayedexpr<-getdelayedeval()
delayedFunc<-delayedexpr[[length(delayedexpr)]]
tmp_delayedFunc<-c(delayedFunc[[1]],quote(lhs))
if(length(delayedFunc)>1){
tmp_delayedFunc<-c(tmp_delayedFunc,as.list(delayedFunc)[-1])
}
delayedexpr[[length(delayedexpr)]]<-as.call(tmp_delayedFunc)
eval(as.call(delayedexpr))
}
devtools::load_all(".")
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor()
df
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z)
cor_test2
play
lhs<-cor_test2
getdelayedeval()
delayedexpr<-getdelayedeval()
delayedFunc<-delayedexpr[[length(delayedexpr)]]
tmp_delayedFunc<-c(delayedFunc[[1]],quote(lhs))
tmp_delayedFuncl
tmp_delayedFunc
if(length(delayedFunc)>1){
tmp_delayedFunc<-c(tmp_delayedFunc,as.list(delayedFunc)[-1])
}
tmp_delayedFunc
delayedexpr[[length(delayedexpr)]]<-as.call(tmp_delayedFunc)
delayedexpr
play<-function(lhs){
delayedexpr<-getdelayedeval()
delayedFunc<-delayedexpr[[length(delayedexpr)]]
tmp_delayedFunc<-c(delayedFunc[[1]],quote(lhs))
if(length(delayedFunc)>1){
tmp_delayedFunc<-c(tmp_delayedFunc,as.list(delayedFunc)[-1])
}
delayedexpr[[length(delayedexpr)]]<-as.call(tmp_delayedFunc)
print(delayedexpr)
# eval(as.call(delayedexpr))
}
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
set.seed(42)
df<-data.frame(x=LETTERS,
y=runif(26),
z=sample(letters,26,replace = TRUE))
df2<-data.frame(x=LETTERS,
w=sample(c(1,2),size = 26,replace = TRUE))
tmpvar2<-df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z)
cor_result <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor(tmpvar2)
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
cor_test2
play
devtools::load_all(".")
devtools::load_all(".")
test_that("Pausing and play works with new", {
set.seed(42)
df<-data.frame(x=LETTERS,
y=runif(26),
z=sample(letters,26,replace = TRUE))
df2<-data.frame(x=LETTERS,
w=sample(c(1,2),size = 26,replace = TRUE))
tmpvar2<-df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z)
cor_result <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor(tmpvar2)
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
testthat::expect_equal(cor_test2,cor_result)
})
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
cor_test2
devtools::load_all(".")
test_that("Pausing and play works with new", {
set.seed(42)
df<-data.frame(x=LETTERS,
y=runif(26),
z=sample(letters,26,replace = TRUE))
df2<-data.frame(x=LETTERS,
w=sample(c(1,2),size = 26,replace = TRUE))
tmpvar2<-df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z)
cor_result <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor(tmpvar2)
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
testthat::expect_equal(cor_test2,cor_result)
})
devtools::load_all(".")
test_that("Pausing and play works with new", {
set.seed(42)
df<-data.frame(x=LETTERS,
y=runif(26),
z=sample(letters,26,replace = TRUE))
df2<-data.frame(x=LETTERS,
w=sample(c(1,2),size = 26,replace = TRUE))
tmpvar2<-df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z)
cor_result <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor(tmpvar2)
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
testthat::expect_equal(cor_test2,cor_result)
})
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
play<-function(lhs){
chain_parts <- magrittr:::split_chain(match.call(), env = env)
return(chain_parts)
# delayedexpr<-getdelayedeval()
# delayedFunc<-delayedexpr[[length(delayedexpr)]]
# tmp_delayedFunc<-c(delayedFunc[[1]],eval(lhs))
# if(length(delayedFunc)>1){
#   tmp_delayedFunc<-c(tmp_delayedFunc,as.list(delayedFunc)[-1])
# }
# delayedexpr[[length(delayedexpr)]]<-as.call(tmp_delayedFunc)
# print(delayedexpr)
# eval(as.call(delayedexpr),parent.frame())
}
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
cor_test2
`%>>>%`<-function(x){return(x)}
test%>>>%
1
`%>>>%`<-function(x,...){return(x)}
test%>>>%
1
"test"%>>>%
1
play<-function(lhs){
delayedexpr<-getdelayedeval()
delayedFunc<-delayedexpr[[length(delayedexpr)]]
tmp_delayedFunc<-c(delayedFunc[[1]],eval(quote(lhs),parent.frame()))
if(length(delayedFunc)>1){
tmp_delayedFunc<-c(tmp_delayedFunc,as.list(delayedFunc)[-1])
}
delayedexpr[[length(delayedexpr)]]<-as.call(tmp_delayedFunc)
print(delayedexpr)
eval(as.call(delayedexpr),parent.frame())
}
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
devtools::load_all(".")
rm(play)
rm(`%>>>%`)
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>%
play
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
play<-function(lhs){
delayedexpr<-getdelayedeval()
delayedFunc<-delayedexpr[[length(delayedexpr)]]
tmp_delayedFunc<-c(delayedFunc[[1]],quote(lhs))
if(length(delayedFunc)>1){
tmp_delayedFunc<-c(tmp_delayedFunc,as.list(delayedFunc)[-1])
}
delayedexpr[[length(delayedexpr)]]<-as.call(tmp_delayedFunc)
print(delayedexpr)
eval(as.call(delayedexpr),parent.frame())
}
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
play
devtools::load_all(".")
rm(play)
devtools::load_all(".")
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
devtools::load_all(".")
cor_test2 <- df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
pull(y) %>%
cor() %||%
df %>%
filter(x%in%c("A","E","I","O","U","Y")) %>%
mutate(z=as.numeric(as.factor(z))) %>%
pull(z) %>>>%
print
