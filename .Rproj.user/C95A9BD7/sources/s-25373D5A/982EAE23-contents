
#' Play pipe
#'
#' Pipe a function - or call expression and runs the priorly paused evaluation
#'
#' @param lhs A value or the magrittr placeholder.
#' @param rhs A function call using the magrittr semantics.
#'
#' @details The pause pipe works like \code{\link{\%>\%}}, except the
#' return value is `rhs` as the second argument of the priorly paused evaluation
#' #'
#' @seealso \code{\link{\%>\%}}, \code{\link{\%||\%}}
#'
#' @import magrittr
#'
#' @rdname play
#' @export
`%>>>%`<-function(lhs,rhs){
  parent <- parent.frame()
  env <- new.env(parent = parent)
  chain_parts <- magrittr:::split_chain(match.call(), env = env)

  funccall<-chain_parts$lhs$rhs
  if(!is.symbol(chain_parts$lhs$rhs)){
    funccall<-chain_parts$lhs$rhs[[1]]
  }
  args<-list()
  if(length(chain_parts$lhs$rhs)>1){
    args<-as.list(chain_parts$lhs$rhs)[-1]
  }

  delayedCall<-as.call(c(substitute(fforward),funccall,args))

  # eval(delayedCall)

  eval(as.call(call("%|||%",chain_parts$lhs$lhs,delayedCall)), parent.frame())
  # list(delayedCall,chain_parts$lhs$lhs)
  # chain_parts
}



fforward<-function(placeholder,func,...){
  parent <- parent.frame()
  if(missing(func)){
    func<-substitute(placeholder)
  }
  # return(func)
  delayedexpr<-makecall(func,getdelayedeval(),...)
  eval(
    delayedexpr
    ,parent,parent)
}

class(fforward)<-c("function","fforward")

is.fforward<-function(func){
  substitute(func)=="fforward"
}

makecall<-function(func,exprs,...){
  call(as.character(func),exprs,...)
}
